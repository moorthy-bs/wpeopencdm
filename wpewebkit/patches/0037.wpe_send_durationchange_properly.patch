ARRISEOS-19504: Send duration change properly.

When it's detected the duration changes the durationchange
event must be dispatched. Unfortunately in cases no event from
GST is sent for the occasion so use the fact the duration is
retrieved very often and send the event if change is detected
there.

Pawel Stanek <pawel.stanek@redembedded.com>

diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 66ad103..da733be 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -95,6 +95,8 @@ const char* gMediaDiskCacheToUse = nullptr;
 
 namespace {
 
+const char kDurationChangeConfirmed[] = "duration-change-confirmed";
+
 enum class MediaCacheStateVarValue : int
 {
     UNKNOWN,
@@ -653,14 +655,43 @@ MediaTime MediaPlayerPrivateGStreamer::durationMediaTime() const
 
     gint64 timeLength = 0;
 
+    // https://www.w3.org/TR/2011/WD-html5-20110113/video.html
+    // 4.8.10.6 Offsets into the media resource:
+    // "If no media data is available, then the attributes must return the Not-a-Number (NaN) value.
+    // If the media resource is known to be unbounded (e.g. a streaming radio),
+    // then the attribute must return the positive Infinity value."
+    if (GST_STATE(m_pipeline.get()) > GST_STATE_PAUSED && isLiveStream() && m_lastKnownDuration == MediaTime::zeroTime())
+        m_lastKnownDuration = MediaTime::positiveInfiniteTime();
+
     if (!gst_element_query_duration(m_pipeline.get(), GST_FORMAT_TIME, &timeLength) || static_cast<guint64>(timeLength) == GST_CLOCK_TIME_NONE) {
-        GST_DEBUG("Time duration query failed for %s", m_url.string().utf8().data());
-        return MediaTime::positiveInfiniteTime();
+        GST_WARNING("Time duration query failed for %s. Returning last known value: %f", m_url.string().utf8().data(), m_lastKnownDuration.toDouble());
+        return m_lastKnownDuration;
     }
 
     GST_DEBUG("Duration: %" GST_TIME_FORMAT, GST_TIME_ARGS(timeLength));
 
-    return MediaTime::createWithDouble(static_cast<double>(timeLength) / GST_SECOND);
+    auto prevKnownDuration = m_lastKnownDuration;
+    m_lastKnownDuration = MediaTime::createWithDouble(static_cast<double>(timeLength) / GST_SECOND);
+    // https://www.w3.org/TR/2011/WD-html5-20110113/video.html
+    // 4.8.10.6 Offsets into the media resource:
+    // "When the length of the media resource changes to a known value (e.g.
+    // from being unknown to known, or from a previously established length to a
+    // new length) the user agent must queue a task to fire a simple event named
+    // durationchange at the media element."
+    // Unfortunately for some streams e.g. HLS the query duration can fail until
+    // start of playback. No event to hook to is triggered once the query is about to
+    // start succeeding from now on but using the fact the duration
+    // is queried all over the code if its change is detected, send GST_DURATION_CHANGED
+    // which will do the rest (also assuring the durationchange is sent.
+    if (prevKnownDuration != m_lastKnownDuration)
+    {
+        GstMessage* message = gst_message_new_duration_changed(GST_OBJECT(m_pipeline.get()));
+        GstStructure* structure = const_cast<GstStructure*>(gst_message_get_structure(message));
+        if (structure)
+            gst_structure_set_name(structure, kDurationChangeConfirmed);
+        gst_element_post_message(m_pipeline.get(), message);
+    }
+    return m_lastKnownDuration;
     // FIXME: handle 3.14.9.5 properly
 }
 
@@ -1244,7 +1275,7 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
         // Duration in MSE is managed by MediaSource, SourceBuffer and AppendPipeline.
         // FIXME: Gstreamer upstream issue getting the MP3 duration, workaround applied by getting the duration from mpegaudioparse.
         if (!isMediaSource() && (messageSourceIsPlaybin || g_strstr_len(GST_MESSAGE_SRC_NAME(message), 14, "mpegaudioparse")))
-            durationChanged();
+            durationChanged(structure && gst_structure_has_name(structure, kDurationChangeConfirmed));
         break;
     case GST_MESSAGE_REQUEST_STATE:
         gst_message_parse_request_state(message, &requestedState);
@@ -1811,10 +1842,12 @@ void MediaPlayerPrivateGStreamer::updateStates()
         // Update ready and network states.
         switch (state) {
         case GST_STATE_NULL:
+            m_lastKnownDuration = {};
             m_readyState = MediaPlayer::HaveNothing;
             m_networkState = MediaPlayer::Empty;
             break;
         case GST_STATE_READY:
+            m_lastKnownDuration = {};
             m_readyState = MediaPlayer::HaveMetadata;
             m_networkState = MediaPlayer::Empty;
             break;
@@ -2070,14 +2103,15 @@ void MediaPlayerPrivateGStreamer::didEnd()
     }
 }
 
-void MediaPlayerPrivateGStreamer::durationChanged()
+void MediaPlayerPrivateGStreamer::durationChanged(bool confirmed)
 {
     float previousDuration = durationMediaTime().toDouble();
 
     // Avoid emiting durationchanged in the case where the previous
     // duration was 0 because that case is already handled by the
     // HTMLMediaElement.
-    if (previousDuration && durationMediaTime().toDouble() != previousDuration)
+    if (previousDuration &&
+        (previousDuration != durationMediaTime().toDouble() || confirmed))
         m_player->durationChanged();
 }
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index 4e38f32..d4b85d1 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -115,7 +115,7 @@ public:
     void loadStateChanged();
     void timeChanged();
     void didEnd();
-    virtual void durationChanged();
+    virtual void durationChanged() { durationChanged(false); }
     void loadingFailed(MediaPlayer::NetworkState);
 
     virtual void sourceChanged();
@@ -136,6 +136,7 @@ public:
     bool handleSyncMessage(GstMessage*) override;
 
 private:
+    void durationChanged(bool confirmed);
     static void getSupportedTypes(HashSet<String, ASCIICaseInsensitiveHash>&);
     static MediaPlayer::SupportsType supportsType(const MediaEngineSupportParameters&);
 
@@ -265,6 +266,7 @@ private:
 #endif
     virtual bool isMediaSource() const { return false; }
     int m_mediaCacheVarState;
+    mutable MediaTime m_lastKnownDuration = {};
 };
 }
 
