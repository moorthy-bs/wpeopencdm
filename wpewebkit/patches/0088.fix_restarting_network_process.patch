(2019.04.01) Jacek Manko (jacek.manko@redembedded.com)
[SAMSELENE-2337] Fix restarting network process

diff --git a/Source/WebKit2/NetworkProcess/NetworkProcess.cpp b/Source/WebKit2/NetworkProcess/NetworkProcess.cpp
index 317460ee8..2fe00ad69 100644
--- a/Source/WebKit2/NetworkProcess/NetworkProcess.cpp
+++ b/Source/WebKit2/NetworkProcess/NetworkProcess.cpp
@@ -107,6 +107,7 @@ NetworkProcess::NetworkProcess()
     , m_webSQLiteDatabaseTracker(*this)
 #endif
 {
+    fprintf(stderr, "NetworkProcess created, PID:%d\n", getpid());
     NetworkProcessPlatformStrategies::initialize();
 
     addSupplement<AuthenticationManager>();
diff --git a/Source/WebKit2/UIProcess/Launcher/wpe/ProcessLauncherWPE.cpp b/Source/WebKit2/UIProcess/Launcher/wpe/ProcessLauncherWPE.cpp
index 72742849b..66848f3db 100644
--- a/Source/WebKit2/UIProcess/Launcher/wpe/ProcessLauncherWPE.cpp
+++ b/Source/WebKit2/UIProcess/Launcher/wpe/ProcessLauncherWPE.cpp
@@ -144,6 +144,7 @@ void ProcessLauncher::terminateProcess()
     if (!m_processIdentifier)
         return;
 
+    fprintf(stderr, "Terminating process, PID:%d\n", m_processIdentifier);
     kill(m_processIdentifier, SIGKILL);
     m_processIdentifier = 0;
 }
diff --git a/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.cpp b/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.cpp
index 067981f08..1518a2cf2 100644
--- a/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.cpp
+++ b/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.cpp
@@ -198,6 +198,23 @@ void NetworkProcessProxy::networkProcessCrashedOrFailedToLaunch()
     m_processPool.networkProcessCrashed(this);
 }
 
+void NetworkProcessProxy::terminate()
+{
+    // networkProcessCrashedOrFailedToLaunch() won't be called during terminate(), but we still need to send any pending replies
+    while (!m_pendingConnectionReplies.isEmpty()) {
+        Ref<Messages::WebProcessProxy::GetNetworkProcessConnection::DelayedReply> reply = m_pendingConnectionReplies.takeFirst();
+#if USE(UNIX_DOMAIN_SOCKETS)
+        reply->send(IPC::Attachment());
+#elif OS(DARWIN)
+        reply->send(IPC::Attachment(0, MACH_MSG_TYPE_MOVE_SEND));
+#else
+        notImplemented();
+#endif
+    }
+
+    ChildProcessProxy::terminate();
+}
+
 void NetworkProcessProxy::didReceiveMessage(IPC::Connection& connection, IPC::Decoder& decoder)
 {
     if (dispatchMessage(connection, decoder))
diff --git a/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.h b/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.h
index c5eb1c6e8..61eadc9ce 100644
--- a/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.h
+++ b/Source/WebKit2/UIProcess/Network/NetworkProcessProxy.h
@@ -78,6 +78,8 @@ public:
 
     ProcessThrottler& throttler() { return m_throttler; }
 
+    void terminate();
+
 private:
     NetworkProcessProxy(WebProcessPool&);
 
diff --git a/Source/WebKit2/WebProcess/WebProcess.cpp b/Source/WebKit2/WebProcess/WebProcess.cpp
index e87cbec54..d80f55294 100644
--- a/Source/WebKit2/WebProcess/WebProcess.cpp
+++ b/Source/WebKit2/WebProcess/WebProcess.cpp
@@ -1096,13 +1096,12 @@ void WebProcess::setInjectedBundleParameters(const IPC::DataReference& value)
 
 NetworkProcessConnection& WebProcess::networkConnection()
 {
-    // If we've lost our connection to the network process (e.g. it crashed) try to re-establish it.
-    if (!m_networkProcessConnection)
+    // Network process either has crashed or has been terminated (e.g to switch security mode)
+    // keep trying to re-establish the connection
+    while (nullptr == m_networkProcessConnection)
+    {
         ensureNetworkProcessConnection();
-    
-    // If we failed to re-establish it then we are beyond recovery and should crash.
-    if (!m_networkProcessConnection)
-        CRASH();
+    }
     
     return *m_networkProcessConnection;
 }
@@ -1138,6 +1137,9 @@ void WebProcess::networkProcessConnectionClosed(NetworkProcessConnection* connec
 
     m_webLoaderStrategy.networkProcessCrashed();
     WebSocketStream::networkProcessCrashed();
+
+    // Restart network process if there are no WebSocketStreams
+    networkConnection();
 }
 
 WebLoaderStrategy& WebProcess::webLoaderStrategy()
