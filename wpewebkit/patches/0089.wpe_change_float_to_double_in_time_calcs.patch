diff --git a/Source/WebCore/platform/graphics/MediaPlayer.cpp b/Source/WebCore/platform/graphics/MediaPlayer.cpp
index 21e5f85454d..269306738ae 100644
--- a/Source/WebCore/platform/graphics/MediaPlayer.cpp
+++ b/Source/WebCore/platform/graphics/MediaPlayer.cpp
@@ -20,7 +20,7 @@
  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
@@ -146,7 +146,7 @@ public:
     MediaPlayer::NetworkState networkState() const override { return MediaPlayer::Empty; }
     MediaPlayer::ReadyState readyState() const override { return MediaPlayer::HaveNothing; }
 
-    float maxTimeSeekable() const override { return 0; }
+    double maxTimeSeekable() const override { return 0; }
     double minTimeSeekable() const override { return 0; }
     std::unique_ptr<PlatformTimeRanges> buffered() const override { return std::make_unique<PlatformTimeRanges>(); }
 
@@ -338,7 +338,7 @@ static const MediaPlayerFactory* nextMediaEngine(const MediaPlayerFactory* curre
     if (engines.isEmpty())
         return nullptr;
 
-    if (!current) 
+    if (!current)
         return &engines.first();
 
     size_t currentIndex = current - &engines.first();
@@ -475,7 +475,7 @@ const MediaPlayerFactory* MediaPlayer::nextBestMediaEngine(const MediaPlayerFact
 
 void MediaPlayer::loadWithNextMediaEngine(const MediaPlayerFactory* current)
 {
-#if ENABLE(MEDIA_SOURCE) 
+#if ENABLE(MEDIA_SOURCE)
 #define MEDIASOURCE m_mediaSource
 #else
 #define MEDIASOURCE 0
@@ -555,12 +555,12 @@ bool MediaPlayer::canLoadPoster() const
 void MediaPlayer::setPoster(const String& url)
 {
     m_private->setPoster(url);
-}    
+}
 
 void MediaPlayer::cancelLoad()
 {
     m_private->cancelLoad();
-}    
+}
 
 void MediaPlayer::prepareToPlay()
 {
@@ -615,7 +615,7 @@ void MediaPlayer::keyAdded()
     m_private->keyAdded();
 }
 #endif
-    
+
 #if ENABLE(ENCRYPTED_MEDIA)
 void MediaPlayer::attemptToDecryptWithInstance(const CDMInstance& instance)
 {
@@ -724,7 +724,7 @@ PlatformLayer* MediaPlayer::platformLayer() const
 {
     return m_private->platformLayer();
 }
-    
+
 #if PLATFORM(IOS) || (PLATFORM(MAC) && ENABLE(VIDEO_PRESENTATION_MODE))
 void MediaPlayer::setVideoFullscreenLayer(PlatformLayer* layer, std::function<void()> completionHandler)
 {
@@ -870,7 +870,7 @@ bool MediaPlayer::didLoadingProgress()
 }
 
 void MediaPlayer::setSize(const IntSize& size)
-{ 
+{
     m_size = size;
     m_private->setSize(size);
 }
@@ -984,12 +984,12 @@ void MediaPlayer::getSupportedTypes(HashSet<String, ASCIICaseInsensitiveHash>& t
         engine.getSupportedTypes(engineTypes);
         types.add(engineTypes.begin(), engineTypes.end());
     }
-} 
+}
 
 bool MediaPlayer::isAvailable()
 {
     return !installedMediaEngines().isEmpty();
-} 
+}
 
 #if USE(NATIVE_FULLSCREEN_VIDEO)
 void MediaPlayer::enterFullscreen()
@@ -1146,7 +1146,7 @@ static void addToHash(HashSet<T>& toHash, HashSet<T>&& fromHash)
     else
         toHash.add(fromHash.begin(), fromHash.end());
 }
-    
+
 HashSet<RefPtr<SecurityOrigin>> MediaPlayer::originsInMediaCache(const String& path)
 {
     HashSet<RefPtr<SecurityOrigin>> origins;
@@ -1453,7 +1453,7 @@ String MediaPlayer::languageOfPrimaryAudioTrack() const
 {
     if (!m_private)
         return emptyString();
-    
+
     return m_private->languageOfPrimaryAudioTrack();
 }
 
@@ -1469,7 +1469,7 @@ unsigned long long MediaPlayer::fileSize() const
 {
     if (!m_private)
         return 0;
-    
+
     return m_private->fileSize();
 }
 
diff --git a/Source/WebCore/platform/graphics/MediaPlayerPrivate.h b/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
index 3e8bcb0567f..fb57eff59b8 100644
--- a/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
+++ b/Source/WebCore/platform/graphics/MediaPlayerPrivate.h
@@ -20,7 +20,7 @@
  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef MediaPlayerPrivate_h
@@ -53,7 +53,7 @@ public:
     virtual void load(MediaStreamPrivate&) = 0;
 #endif
     virtual void cancelLoad() = 0;
-    
+
     virtual void prepareToPlay() { }
     virtual PlatformMedia platformMedia() const { return NoPlatformMedia; }
     virtual PlatformLayer* platformLayer() const { return 0; }
@@ -73,7 +73,7 @@ public:
     virtual long platformErrorCode() const { return 0; }
 
     virtual void play() = 0;
-    virtual void pause() = 0;    
+    virtual void pause() = 0;
     virtual void setShouldBufferData(bool) { }
 
     virtual bool supportsFullscreen() const { return false; }
@@ -89,11 +89,11 @@ public:
 
     virtual void setVisible(bool) = 0;
 
-    virtual float duration() const { return 0; }
+    virtual double duration() const { return 0; }
     virtual double durationDouble() const { return duration(); }
     virtual MediaTime durationMediaTime() const { return MediaTime::createWithDouble(durationDouble()); }
 
-    virtual float currentTime() const { return 0; }
+    virtual double currentTime() const { return 0; }
     virtual double currentTimeDouble() const { return currentTime(); }
     virtual MediaTime currentMediaTime() const { return MediaTime::createWithDouble(currentTimeDouble()); }
 
@@ -125,7 +125,7 @@ public:
     virtual bool supportsMuting() const { return false; }
     virtual void setMuted(bool) { }
 
-    virtual bool hasClosedCaptions() const { return false; }    
+    virtual bool hasClosedCaptions() const { return false; }
     virtual void setClosedCaptionsVisible(bool) { }
 
     virtual double maxFastForwardRate() const { return std::numeric_limits<double>::infinity(); }
@@ -135,7 +135,7 @@ public:
     virtual MediaPlayer::ReadyState readyState() const = 0;
 
     virtual std::unique_ptr<PlatformTimeRanges> seekable() const { return maxMediaTimeSeekable() == MediaTime::zeroTime() ? std::make_unique<PlatformTimeRanges>() : std::make_unique<PlatformTimeRanges>(minMediaTimeSeekable(), maxMediaTimeSeekable()); }
-    virtual float maxTimeSeekable() const { return 0; }
+    virtual double maxTimeSeekable() const { return 0; }
     virtual MediaTime maxMediaTimeSeekable() const { return MediaTime::createWithDouble(maxTimeSeekable()); }
     virtual double minTimeSeekable() const { return 0; }
     virtual MediaTime minMediaTimeSeekable() const { return MediaTime::createWithDouble(minTimeSeekable()); }
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index abcfeb6bd80..abaa68ed005 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -481,7 +481,7 @@ double MediaPlayerPrivateGStreamer::playbackPosition() const
         result = toSecondsWithMicroFractions(m_videoDecoderPosition);
         GST_DEBUG_OBJECT(
             m_pipeline.get(),
-            "%fs (%" PRId64 "ns)", result, int64_t(m_videoDecoderPosition.count()));
+            "%" PRId64 "us %fs", g_get_monotonic_time(), MediaTime{m_videoDecoderPosition.count(), GST_SECOND}.toDouble());
         return result;
     }
 
@@ -822,7 +822,7 @@ void MediaPlayerPrivateGStreamer::updatePlaybackRate()
     if (!m_changingRate)
         return;
 
-    float currentPosition = static_cast<float>(playbackPosition() * GST_SECOND);
+    double currentPosition = playbackPosition() * GST_SECOND;
     bool mute = false;
 
     GST_INFO("Set Rate to %f", m_playbackRate);
@@ -1142,7 +1142,7 @@ std::unique_ptr<PlatformTimeRanges> MediaPlayerPrivateGStreamer::buffered() cons
     if (m_errorOccured || isLiveStream())
         return timeRanges;
 
-    float mediaDuration(durationMediaTime().toDouble());
+    double mediaDuration(durationMediaTime().toDouble());
     if (!mediaDuration || std::isinf(mediaDuration))
         return timeRanges;
 
@@ -1164,7 +1164,7 @@ std::unique_ptr<PlatformTimeRanges> MediaPlayerPrivateGStreamer::buffered() cons
     // Fallback to the more general maxTimeLoaded() if no range has
     // been found.
     if (!timeRanges->length())
-        if (float loaded = maxTimeLoaded())
+        if (double loaded = maxTimeLoaded())
             timeRanges->add(MediaTime::zeroTime(), MediaTime::createWithDouble(loaded));
 
     gst_query_unref(query);
@@ -1602,7 +1602,7 @@ void MediaPlayerPrivateGStreamer::fillTimerFired()
 
     GST_DEBUG("[Buffering] Download buffer filled up to %f%%", fillStatus);
 
-    float mediaDuration = durationMediaTime().toDouble();
+    double mediaDuration = durationMediaTime().toDouble();
 
     // Update maxTimeLoaded only if the media duration is
     // available. Otherwise we can't compute it.
@@ -1610,7 +1610,7 @@ void MediaPlayerPrivateGStreamer::fillTimerFired()
         if (fillStatus == 100.0)
             m_maxTimeLoaded = mediaDuration;
         else
-            m_maxTimeLoaded = static_cast<float>((fillStatus * mediaDuration) / 100.0);
+            m_maxTimeLoaded = (fillStatus * mediaDuration) / 100.0;
         GST_DEBUG("[Buffering] Updated maxTimeLoaded: %f", m_maxTimeLoaded);
     }
 
@@ -1627,12 +1627,12 @@ void MediaPlayerPrivateGStreamer::fillTimerFired()
     updateStates();
 }
 
-float MediaPlayerPrivateGStreamer::maxTimeSeekable() const
+double MediaPlayerPrivateGStreamer::maxTimeSeekable() const
 {
     if (m_errorOccured)
         return 0.0f;
 
-    float mediaDuration = durationMediaTime().toDouble();
+    double mediaDuration = durationMediaTime().toDouble();
     GST_DEBUG("maxTimeSeekable, duration: %f", mediaDuration);
     // infinite duration means live stream
     if (std::isinf(mediaDuration))
@@ -1641,12 +1641,12 @@ float MediaPlayerPrivateGStreamer::maxTimeSeekable() const
     return mediaDuration;
 }
 
-float MediaPlayerPrivateGStreamer::maxTimeLoaded() const
+double MediaPlayerPrivateGStreamer::maxTimeLoaded() const
 {
     if (m_errorOccured)
         return 0.0f;
 
-    float loaded = m_maxTimeLoaded;
+    double loaded = m_maxTimeLoaded;
     if (m_isEndReached && m_durationAtEOS) {
         GST_DEBUG("maxTimeLoaded at EOS: %f", loaded);
         loaded = m_durationAtEOS;
@@ -1659,7 +1659,7 @@ bool MediaPlayerPrivateGStreamer::didLoadingProgress() const
 {
     if (UNLIKELY(!m_pipeline || !durationMediaTime() || (!isMediaSource() && !totalBytes())))
         return false;
-    float currentMaxTimeLoaded = maxTimeLoaded();
+    double currentMaxTimeLoaded = maxTimeLoaded();
     bool didLoadingProgress = currentMaxTimeLoaded != m_maxTimeLoadedAtLastDidLoadingProgress;
     m_maxTimeLoadedAtLastDidLoadingProgress = currentMaxTimeLoaded;
     GST_DEBUG("didLoadingProgress: %d", didLoadingProgress);
@@ -2150,7 +2150,7 @@ void MediaPlayerPrivateGStreamer::didEnd()
 
 void MediaPlayerPrivateGStreamer::durationChanged(bool confirmed)
 {
-    float previousDuration = durationMediaTime().toDouble();
+    double previousDuration = durationMediaTime().toDouble();
 
     // Avoid emiting durationchanged in the case where the previous
     // duration was 0 because that case is already handled by the
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index 3c89bed2da0..50d0d23ed4b 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -107,10 +107,10 @@ public:
     void fillTimerFired();
 
     std::unique_ptr<PlatformTimeRanges> buffered() const override;
-    float maxTimeSeekable() const override;
+    double maxTimeSeekable() const override;
     bool didLoadingProgress() const override;
     unsigned long long totalBytes() const override;
-    float maxTimeLoaded() const override;
+    double maxTimeLoaded() const override;
 
     bool hasSingleSecurityOrigin() const override;
 
@@ -248,13 +248,13 @@ private:
     GstStructure* m_mediaLocations;
     int m_mediaLocationCurrentIndex;
     bool m_playbackRatePause;
-    float m_timeOfOverlappingSeek;
+    double m_timeOfOverlappingSeek;
     float m_lastPlaybackRate;
     Timer m_fillTimer;
-    float m_maxTimeLoaded;
+    double m_maxTimeLoaded;
     MediaPlayer::Preload m_preload;
     bool m_delayingLoad;
-    mutable float m_maxTimeLoadedAtLastDidLoadingProgress;
+    mutable double m_maxTimeLoadedAtLastDidLoadingProgress;
     bool m_hasVideo;
     bool m_hasAudio;
     RunLoop::Timer<MediaPlayerPrivateGStreamer> m_readyTimerHandler;
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
index 7e9330c5070..22200f3c17e 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
@@ -104,7 +104,7 @@ public:
     void paint(GraphicsContext&, const FloatRect&) override;
 
     bool hasSingleSecurityOrigin() const override { return true; }
-    virtual float maxTimeLoaded() const { return 0.0; }
+    virtual double maxTimeLoaded() const { return 0.0; }
 
     bool supportsFullscreen() const override;
     PlatformMedia platformMedia() const override;
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.cpp
index 741a5c87616..9161375c17b 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.cpp
@@ -127,7 +127,7 @@ void MediaPlayerPrivateGStreamerOwr::setMuted(bool muted)
     g_object_set(mediaSource, "mute", muted, nullptr);
 }
 
-float MediaPlayerPrivateGStreamerOwr::currentTime() const
+double MediaPlayerPrivateGStreamerOwr::currentTime() const
 {
     gint64 position = GST_CLOCK_TIME_NONE;
     GstQuery* query = gst_query_new_position(GST_FORMAT_TIME);
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.h
index 334630e45c3..791744a8117 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerOwr.h
@@ -67,9 +67,9 @@ private:
     bool hasVideo() const final;
     bool hasAudio() const final;
 
-    float duration() const final { return 0; }
+    double duration() const final { return 0; }
 
-    float currentTime() const final;
+    double currentTime() const final;
     void seek(float) final { }
     bool seeking() const final { return false; }
 
@@ -83,7 +83,7 @@ private:
     bool hasClosedCaptions() const final { return false; }
     void setClosedCaptionsVisible(bool) final { };
 
-    float maxTimeSeekable() const final { return 0; }
+    double maxTimeSeekable() const final { return 0; }
     std::unique_ptr<PlatformTimeRanges> buffered() const final { return std::make_unique<PlatformTimeRanges>(); }
     bool didLoadingProgress() const final;
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.cpp
index 86d4329df25..d6988436b16 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.cpp
@@ -93,8 +93,8 @@ void GStreamerMediaSample::offsetTimestampsBy(const MediaTime& timestampOffset)
     m_dts += timestampOffset;
     GstBuffer* buffer = gst_sample_get_buffer(m_sample.get());
     if (buffer) {
-        GST_BUFFER_PTS(buffer) = toGstClockTime(m_pts.toFloat());
-        GST_BUFFER_DTS(buffer) = toGstClockTime(m_dts.toFloat());
+        GST_BUFFER_PTS(buffer) = toGstClockTime(m_pts.toDouble());
+        GST_BUFFER_DTS(buffer) = toGstClockTime(m_dts.toDouble());
     }
 }
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
index 7c0caf749b4..13767f35fa5 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
@@ -127,6 +127,9 @@ MediaPlayerPrivateGStreamerMSE::~MediaPlayerPrivateGStreamerMSE()
     for (auto iterator : m_appendPipelinesMap)
         iterator.value->clearPlayerPrivate();
 
+   if (m_mediaSourceClient)
+        m_mediaSourceClient->clearPlayerPrivate();
+
     if (m_source) {
         webKitMediaSrcSetMediaPlayerPrivate(WEBKIT_MEDIA_SRC(m_source.get()), nullptr);
         g_signal_handlers_disconnect_by_data(m_source.get(), this);
@@ -326,7 +329,7 @@ bool MediaPlayerPrivateGStreamerMSE::doSeek()
             const MediaTime miniGap = MediaTime(1, 10);
             MediaTime nearest = m_mediaSource->buffered()->nearest(seekTime);
             if (nearest.isValid() && nearest > seekTime && (nearest - seekTime) <= miniGap && isTimeBuffered(nearest + miniGap)) {
-                GST_DEBUG_OBJECT(m_pipeline.get(), "changed the seek target time from %f to %f, a near point in the future", seekTime.toFloat(), nearest.toFloat());
+                GST_DEBUG_OBJECT(m_pipeline.get(), "changed the seek target time from %f to %f, a near point in the future", seekTime.toDouble(), nearest.toDouble());
                 seekTime = nearest;
             }
         }
@@ -352,7 +355,7 @@ bool MediaPlayerPrivateGStreamerMSE::doSeek()
             }
             return true;
         }
-        GST_DEBUG_OBJECT(m_pipeline.get(), "target seek time is not buffered yet, but media source says OK to continue the seek, seekTime %fs", seekTime.toFloat());
+        GST_DEBUG_OBJECT(m_pipeline.get(), "target seek time is not buffered yet, but media source says OK to continue the seek, seekTime %fs", seekTime.toDouble());
     }
 
     // Complete previous MSE seek if needed.
@@ -363,7 +366,7 @@ bool MediaPlayerPrivateGStreamerMSE::doSeek()
         return m_seeking;
     }
 
-    GST_DEBUG_OBJECT(m_pipeline.get(), "can seek now to %" GST_TIME_FORMAT, GST_TIME_ARGS(position));
+    GST_DEBUG_OBJECT(m_pipeline.get(), "can seek now to %fs", MediaTime{position, GST_SECOND}.toDouble());
 
     gint64 startTime = position, endTime = GST_CLOCK_TIME_NONE;
     if (rate < 0) {
@@ -374,7 +377,12 @@ bool MediaPlayerPrivateGStreamerMSE::doSeek()
     if (!rate)
         rate = 1;
 
-    GST_DEBUG_OBJECT(m_pipeline.get(), "seek to %" GST_TIME_FORMAT ", end time:  %" GST_TIME_FORMAT ", rate: %f", GST_TIME_ARGS(startTime), GST_TIME_ARGS(endTime), rate);
+    GST_DEBUG_OBJECT(
+        m_pipeline.get(),
+        "seek to %fs end time %fs rate %f",
+        MediaTime{startTime, GST_SECOND}.toDouble(),
+        endTime,
+        rate);
 
     // This will call notifySeekNeedsData() after some time to tell that the pipeline is ready for sample enqueuing.
     webKitMediaSrcPrepareSeek(WEBKIT_MEDIA_SRC(m_source.get()), seekTime);
@@ -734,7 +742,7 @@ void MediaPlayerPrivateGStreamerMSE::durationChanged()
     MediaTime previousDuration = m_mediaTimeDuration;
     m_mediaTimeDuration = m_mediaSourceClient->duration();
 
-    GST_TRACE("previous=%f, new=%f", previousDuration.toFloat(), m_mediaTimeDuration.toFloat());
+    GST_TRACE("previous=%f, new=%f", previousDuration.toDouble(), m_mediaTimeDuration.toDouble());
 
     // Avoid emiting durationchanged in the case where the previous duration was 0 because that case is already handled
     // by the HTMLMediaElement.
@@ -947,24 +955,24 @@ MediaTime MediaPlayerPrivateGStreamerMSE::currentMediaTime() const
             m_player->networkStateChanged();
         }
 
-        m_durationAtEOS = m_mediaTimeDuration.toFloat();
+        m_durationAtEOS = m_mediaTimeDuration.toDouble();
         m_player->timeChanged();
     }
     return position;
 }
 
-float MediaPlayerPrivateGStreamerMSE::maxTimeSeekable() const
+double MediaPlayerPrivateGStreamerMSE::maxTimeSeekable() const
 {
     if (UNLIKELY(m_errorOccured))
         return 0;
 
     GST_DEBUG("maxTimeSeekable");
-    float result = durationMediaTime().toFloat();
+    auto result = durationMediaTime().toDouble();
     // Infinite duration means live stream.
     if (std::isinf(result)) {
         MediaTime maxBufferedTime = buffered()->maximumBufferedTime();
         // Return the highest end time reported by the buffered attribute.
-        result = maxBufferedTime.isValid() ? maxBufferedTime.toFloat() : 0;
+        result = maxBufferedTime.isValid() ? maxBufferedTime.toDouble() : 0;
     }
 
     return result;
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.h b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.h
index 9d60a3a1404..674e578d267 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.h
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.h
@@ -69,7 +69,7 @@ public:
 
     void setRate(float) override;
     std::unique_ptr<PlatformTimeRanges> buffered() const override;
-    float maxTimeSeekable() const override;
+    double maxTimeSeekable() const override;
 
     void sourceChanged() override;
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
index 5671310ff82..d4b67e2e2d3 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
@@ -75,6 +75,7 @@ public:
     void didReceiveInitializationSegment(const SourceBufferPrivateClient::InitializationSegment&);
     void didReceiveSample(MediaSample&);
     void didReceiveAllPendingSamples();
+    AtomicString trackId() const {return m_trackId;}
 
 private:
     SourceBufferPrivateGStreamer(MediaSourceGStreamer*, Ref<MediaSourceClientGStreamerMSE>, const ContentType&);
