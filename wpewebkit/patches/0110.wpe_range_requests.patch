[SAMSELENE-2945] Use Content-Range header to determine content length

Jacek Manko <jacek.manko@redembedded.com>

diff --git a/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
index 9d776dc7b..f5733e69c 100644
--- a/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
@@ -354,6 +354,7 @@ static void webKitWebSrcSetProperty(GObject* object, guint propID, const GValue*
 {
     WebKitWebSrc* src = WEBKIT_WEB_SRC(object);
 
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     switch (propID) {
     case PROP_LOCATION:
         gst_uri_handler_set_uri(reinterpret_cast<GstURIHandler*>(src), g_value_get_string(value), nullptr);
@@ -561,16 +562,17 @@ static void webKitWebSrcStart(WebKitWebSrc* src)
         request.setAcceptEncoding(false);
 #endif
 
+
+    request.setHTTPHeaderField(HTTPHeaderName::AcceptEncoding, "identity;q=1, *;q=0");
+
     // Let Apple web servers know we want to access their nice movie trailers.
     if (!g_ascii_strcasecmp("movies.apple.com", url.host().utf8().data())
         || !g_ascii_strcasecmp("trailers.apple.com", url.host().utf8().data()))
         request.setHTTPUserAgent("Quicktime/7.6.6");
 
-    GST_DEBUG_OBJECT(src, "Requested offset: %" G_GUINT64_FORMAT, priv->requestedOffset);
-    if (priv->requestedOffset) {
-        GUniquePtr<gchar> val(g_strdup_printf("bytes=%" G_GUINT64_FORMAT "-", priv->requestedOffset));
-        request.setHTTPHeaderField(HTTPHeaderName::Range, val.get());
-    }
+    request.setHTTPHeaderField(
+        HTTPHeaderName::Range,
+        ("bytes=" + std::to_string(priv->requestedOffset) + "-").c_str());
     priv->offset = priv->requestedOffset;
 
     if (!priv->keepAlive) {
@@ -678,6 +680,7 @@ static gboolean webKitWebSrcQueryWithParent(GstPad* pad, GstObject* parent, GstQ
 {
     WebKitWebSrc* src = WEBKIT_WEB_SRC(GST_ELEMENT(parent));
     gboolean result = FALSE;
+    GST_DEBUG_OBJECT(src, "size %zub", src->priv->size);
 
     switch (GST_QUERY_TYPE(query)) {
     case GST_QUERY_DURATION: {
@@ -692,7 +695,7 @@ static gboolean webKitWebSrcQueryWithParent(GstPad* pad, GstObject* parent, GstQ
             if(src->priv->size > 0) {
                 gst_query_set_duration(query, format, src->priv->size);
                 result = TRUE;
-                GST_DEBUG_OBJECT(src, "size %zub", src->priv->size);
+                GST_DEBUG_OBJECT(src, "%p size %zub", src->priv, src->priv->size);
             }
         }
         break;
@@ -720,7 +723,7 @@ static gboolean webKitWebSrcQueryWithParent(GstPad* pad, GstObject* parent, GstQ
             WTF::GMutexLocker<GMutex> gstLocker(*GST_OBJECT_GET_LOCK(src));
 
             GstContext* context = gst_context_new("http-headers", FALSE);
-            gst_context_make_writable(context);
+            context = gst_context_make_writable(context);
             GstStructure* contextStructure = gst_context_writable_structure(context);
 
             const gchar* cookiesArray[] = { src->priv->cookies.get(), nullptr};
@@ -831,6 +834,8 @@ static void webKitWebSrcNeedData(WebKitWebSrc* src)
     GRefPtr<WebKitWebSrc> protector = WTF::ensureGRef(src);
     priv->notifier.notify(MainThreadSourceNotification::NeedData, [protector] {
         WebKitWebSrcPrivate* priv = protector->priv;
+        GST_DEBUG_OBJECT(protector.get(), "notify need");
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(protector.get()));
         if (priv->resource)
             priv->resource->setDefersLoading(false);
     });
@@ -856,6 +861,8 @@ static void webKitWebSrcEnoughData(WebKitWebSrc* src)
     GRefPtr<WebKitWebSrc> protector = WTF::ensureGRef(src);
     priv->notifier.notify(MainThreadSourceNotification::EnoughData, [protector] {
         WebKitWebSrcPrivate* priv = protector->priv;
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(protector.get()));
+        GST_DEBUG_OBJECT(protector.get(), "notify enough");
         if (priv->resource)
             priv->resource->setDefersLoading(true);
     });
@@ -871,7 +878,9 @@ static gboolean webKitWebSrcSeek(WebKitWebSrc* src, guint64 offset)
             return TRUE;
 
         if (!priv->seekable)
+        {
             return FALSE;
+        }
 
         priv->isSeeking = true;
         priv->requestedOffset = offset;
@@ -942,6 +951,7 @@ void StreamingClient::handleResponseReceived(const ResourceResponse& response)
     GST_DEBUG_OBJECT(src, "Received response: %d", response.httpStatusCode());
 
     auto responseURI = response.url().string().utf8();
+
     if (priv->originalURI != responseURI)
         priv->redirectedURI = WTFMove(responseURI);
 
@@ -974,10 +984,32 @@ void StreamingClient::handleResponseReceived(const ResourceResponse& response)
         }
     }
 
-    long long length = response.expectedContentLength();
-    GST_DEBUG_OBJECT(src, "response: %d, content length: %lld, requested offset: %" G_GUINT64_FORMAT, response.httpStatusCode(), length, priv->requestedOffset);
-    if (length > 0 && priv->requestedOffset && response.httpStatusCode() == 206)
-        length += priv->requestedOffset;
+    int64_t length = 0;
+
+
+    if (response.httpHeaderFields().contains(HTTPHeaderName::ContentLength))
+    {
+        length = response.expectedContentLength();
+        GST_DEBUG_OBJECT(src, "response: %d, content length: %lld, requested offset: %" G_GUINT64_FORMAT, response.httpStatusCode(), length, priv->requestedOffset);
+        if (length > 0 && priv->requestedOffset && response.httpStatusCode() == 206)
+            length += priv->requestedOffset;
+    } else if (response.httpHeaderFields().contains((HTTPHeaderName::ContentRange)))
+    {
+        GST_DEBUG_OBJECT(
+            src,
+            "(%" PRId64 " %" PRId64 "] length %" PRId64,
+            response.contentRange().firstBytePosition(),
+            response.contentRange().lastBytePosition(),
+            response.contentRange().instanceLength());
+
+        if (response.contentRange().instanceLength() != ParsedContentRange::UnknownLength)
+        {
+            length = response.contentRange().instanceLength();
+        } else
+        {
+            length = response.contentRange().lastBytePosition() + 1;
+        }
+    }
 
     priv->seekable = length > 0 && g_ascii_strcasecmp("none", response.httpHeaderField(HTTPHeaderName::AcceptRanges).utf8().data());
 
@@ -1079,6 +1111,11 @@ void StreamingClient::handleDataReceived(const char* data, int length)
     GstFlowReturn ret = gst_app_src_push_buffer(priv->appsrc, priv->buffer.leakRef());
     if (ret != GST_FLOW_OK && ret != GST_FLOW_EOS && ret != GST_FLOW_FLUSHING)
         GST_ELEMENT_ERROR(src, CORE, FAILED, (nullptr), (nullptr));
+
+    if(GST_FLOW_OK != ret)
+    {
+        GST_DEBUG_OBJECT(priv->appsrc, "GST_FLOW: %d", ret);
+    }
 }
 
 void StreamingClient::handleNotifyFinished()
@@ -1257,7 +1294,9 @@ void ResourceHandleStreamingClient::didReceiveBuffer(ResourceHandle*, Ref<Shared
         return;
 
     for (const auto& segment : buffer.get())
+    {
         handleDataReceived(segment->data(), segment->size());
+    }
 }
 
 void ResourceHandleStreamingClient::didFinishLoading(ResourceHandle*)
