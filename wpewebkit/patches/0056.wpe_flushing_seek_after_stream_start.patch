ARRISEOS-22492: Do flushing seek after stream start event

This makes sure not only the pipeline is in a proper state
(PAUSED or PLAYING) but also that it's fully operational.
Otherwise the event may never be sent if it's tried to be
sent after flushing (it'll be ignored) leaving the pipe
being constructed broken.

Pawel Stanek <pawel.stanek@redembedded.com>

diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 1803578b84f..62b7abcb4b0 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -376,6 +376,7 @@ void MediaPlayerPrivateGStreamer::load(const String& urlString)
         m_url.setProtocol("webkit+" + m_url.protocol());
 #endif
 
+    m_startStreamSeen = false;
     if (!m_pipeline)
         createGSTPlayBin();
 
@@ -731,13 +732,14 @@ void MediaPlayerPrivateGStreamer::seek(float time)
         return;
     }
 
-    if (getStateResult == GST_STATE_CHANGE_ASYNC || state < GST_STATE_PAUSED || m_isEndReached) {
+    if (getStateResult == GST_STATE_CHANGE_ASYNC || state < GST_STATE_PAUSED || m_isEndReached || !m_startStreamSeen) {
         CString reason = "Unknown reason";
         if (getStateResult == GST_STATE_CHANGE_ASYNC) reason = String::format("In async change %s --> %s", gst_element_state_get_name(state), gst_element_state_get_name(newState)).utf8();
         else if (state < GST_STATE_PAUSED) reason = "State less than PAUSED";
         else if (m_isEndReached) reason = "End reached";
+        else reason = "Stream-start not seen yet";
 
-        GST_DEBUG("Delaying the seek: %s", reason.data());
+        GST_INFO("Delaying the seek: %s", reason.data());
         m_seekIsPending = true;
         if (m_isEndReached) {
             GST_DEBUG("[Seek] reset pipeline");
@@ -1091,8 +1093,11 @@ void MediaPlayerPrivateGStreamer::setRate(float rate)
     }
 
     if ((state != GST_STATE_PLAYING && state != GST_STATE_PAUSED)
-        || (pending == GST_STATE_PAUSED))
+        || (pending == GST_STATE_PAUSED)
+        || !m_startStreamSeen) {
+        GST_INFO("Delaying playback rate update");
         return;
+    }
 
     updatePlaybackRate();
 }
@@ -1218,6 +1223,12 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
 #endif
         didEnd();
         break;
+    case GST_MESSAGE_STREAM_START:
+        if (!messageSourceIsPlaybin || m_delayingLoad)
+            break;
+        m_startStreamSeen = true;
+        updateStates();
+        break;
     case GST_MESSAGE_ASYNC_DONE:
         if (!messageSourceIsPlaybin || m_delayingLoad)
             break;
@@ -1930,7 +1941,7 @@ void MediaPlayerPrivateGStreamer::updateStates()
         m_player->readyStateChanged();
     }
 
-    if (getStateResult == GST_STATE_CHANGE_SUCCESS && state >= GST_STATE_PAUSED) {
+    if (getStateResult == GST_STATE_CHANGE_SUCCESS && state >= GST_STATE_PAUSED && m_startStreamSeen) {
         updatePlaybackRate();
         if (m_seekIsPending) {
             GST_DEBUG("[Seek] committing pending seek to %f", m_seekTime);
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index 9a58c94c646..d21c8fa7f28 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -270,6 +270,7 @@ private:
     virtual bool isMediaSource() const { return false; }
     int m_mediaCacheVarState;
     mutable MediaTime m_lastKnownDuration = {};
+    bool m_startStreamSeen = false;
 };
 }
 
