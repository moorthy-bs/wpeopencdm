Index: git/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp
+++ git/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp
@@ -343,14 +343,6 @@ MediaPlayerPrivateGStreamerBase::MediaPl
 #if USE(COORDINATED_GRAPHICS_THREADED)
     m_platformLayerProxy = adoptRef(new TextureMapperPlatformLayerProxy());
 #endif
-
-#if USE(HOLE_PUNCH_GSTREAMER)
-#if USE(COORDINATED_GRAPHICS_THREADED)
-    LockHolder locker(m_platformLayerProxy->lock());
-    m_platformLayerProxy->pushNextBuffer(std::make_unique<TextureMapperPlatformLayerBuffer>(0, m_size, TextureMapperGL::ShouldOverwriteRect, GraphicsContext3D::DONT_CARE));
-#endif
-#endif
-
 }
 
 MediaPlayerPrivateGStreamerBase::~MediaPlayerPrivateGStreamerBase()
@@ -1166,6 +1158,21 @@ void MediaPlayerPrivateGStreamerBase::cl
 }
 #endif
 
+void MediaPlayerPrivateGStreamerBase::setVisible(bool val) {
+    if( m_visible != val ) {
+        m_visible = val;
+#if USE(HOLE_PUNCH_GSTREAMER)
+#if USE(COORDINATED_GRAPHICS_THREADED)
+        if( m_visible ) {
+            LockHolder locker(m_platformLayerProxy->lock());
+            m_platformLayerProxy->pushNextBuffer(std::make_unique<TextureMapperPlatformLayerBuffer>(0, m_size, TextureMapperGL::ShouldOverwriteRect, GraphicsContext3D::DONT_CARE));
+        }
+#endif
+#endif
+    }
+}
+
+
 void MediaPlayerPrivateGStreamerBase::setSize(const IntSize& size)
 {
     if (size == m_size) {
Index: git/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
+++ git/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.h
@@ -96,7 +96,7 @@ public:
 
     bool ended() const override { return m_isEndReached; }
 
-    void setVisible(bool) override { }
+    void setVisible(bool val) override;
     void setSize(const IntSize&) override;
     void setPosition(const IntPoint&) override;
     void sizeChanged();
@@ -377,6 +377,7 @@ private:
     void onKeyRequestGenerated(PlayreadySession* session, RefPtr<Uint8Array> data, const String& destinationURL, unsigned short errorCode, uint32_t systemCode);
 #endif
 #endif
+    bool m_visible = false;
 };
 
 }
